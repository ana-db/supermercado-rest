	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		LOG.debug("POST crear recurso");
		
		try {
		
			// convertir json del request body a Objeto:
			BufferedReader reader = request.getReader(); //coge los datos del body de postman           
			Gson gson = new Gson(); //crea un objeto gson
			Producto producto = gson.fromJson(reader, Producto.class);	//convierte el objeto gson en uno de la clase Producto
			LOG.debug(" Json convertido a Objeto: " + producto);
		
			//validamos que el objeto esté bien creado:
			Set<ConstraintViolation<Producto>>  validacionesErrores = validator.validate(producto);		
			if ( validacionesErrores.isEmpty() ) {
		
				Producto pNuevo = productoDao.create(producto);
				
				//response status code:
				statusCode = HttpServletResponse.SC_CREATED;	//201, creado 
				responseBody = pNuevo;
				
			}else {
				
				//response status code:			
				statusCode = HttpServletResponse.SC_BAD_REQUEST;	//400, datos incorrectos para un producto: precio negativo…
				ResponseMensaje responseMensaje = new ResponseMensaje("Los valores de este producto no son correctos, revisalos por favor");
				
				//enviamos un array de errores para que el usuario tenga una idea de qué datos ha metido mal y por qué:
				ArrayList<String> errores = new ArrayList<String>();
				for (ConstraintViolation<Producto> error : validacionesErrores) {					 
					errores.add( error.getPropertyPath() + " " + error.getMessage() );
				}				
				responseMensaje.setErrores(errores);				
				responseBody = responseMensaje;
				
			}
			
		} catch (MySQLIntegrityConstraintViolationException e) {
			// response status code
			responseBody = new ResponseMensaje("El nombre del producto ya existe en la base de datos, elige otro");			
			statusCode = HttpServletResponse.SC_CONFLICT;	//409, nombre duplicado en la bd
		} catch (Exception e) {
			// response status code
			responseBody = new ResponseMensaje(e.getMessage());			
			statusCode = HttpServletResponse.SC_BAD_REQUEST;	//400, datos incorrectos para un producto: precio negativo…
		} 
		
	}
	

	/**
	 * @see HttpServlet#doPut(HttpServletRequest, HttpServletResponse)
	 */
	protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		LOG.debug("PUT modificar recurso");
		
		try {
			
			//cogemos el valor del índice del producto en la url con la función obtenerId (lo hacemos en el service, int id = Utilidades.obtenerId(pathInfo); )
			
			if ( id != -1 ) { //significa que el producto sí existe en la bd. Lo editamos según su id
				
				// convertir json del request body a Objeto:
				BufferedReader reader = request.getReader(); //coge los datos del body de postman           
				Gson gson = new Gson(); //crea un objeto gson
				Producto producto = gson.fromJson(reader, Producto.class);	//convierte el objeto gson en uno de la clase Producto
				LOG.debug(" Json convertido a Objeto: " + producto);
			
				//validamos que el objeto esté bien creado:
				Set<ConstraintViolation<Producto>>  validacionesErrores = validator.validate(producto);		
				if ( validacionesErrores.isEmpty() ) {
			
					Producto pEditar = productoDao.update(producto, id);
										
					//response status code:
					statusCode = HttpServletResponse.SC_OK;	//200, ok
					responseBody = pEditar;
					
				}else {
					
					//response status code:			
					statusCode = HttpServletResponse.SC_BAD_REQUEST;	//400, datos incorrectos para un producto: precio negativo…
					ResponseMensaje responseMensaje = new ResponseMensaje("Los valores de este producto no son correctos, revisalos por favor");
					
					//enviamos un array de errores para que el usuario tenga una idea de qué datos ha metido mal y por qué:
					ArrayList<String> errores = new ArrayList<String>();
					for (ConstraintViolation<Producto> error : validacionesErrores) {					 
						errores.add( error.getPropertyPath() + " " + error.getMessage() );
					}				
					responseMensaje.setErrores(errores);				
					responseBody = responseMensaje;
					
				}
				
			}else {
				statusCode = HttpServletResponse.SC_NOT_FOUND;	//404, no se encuentra el recurso solicitado
			}
			
		} catch (MySQLIntegrityConstraintViolationException e) {
			// response status code
			responseBody = new ResponseMensaje("El nombre del producto ya existe en la base de datos, elige otro");			
			statusCode = HttpServletResponse.SC_CONFLICT;	//409, nombre duplicado en la bd
		} catch (Exception e) {
			// response status code
			responseBody = new ResponseMensaje(e.getMessage());			
			statusCode = HttpServletResponse.SC_BAD_REQUEST;	//400, datos incorrectos para un producto: precio negativo…
		} 
		
		
/*		
		// convertir json del request body a Objeto
		BufferedReader reader = request.getReader(); //coge los datos del body de postman           
		Gson gson = new Gson(); //crea un objeto gson
		Producto producto = gson.fromJson(reader, Producto.class);	//convierte el objeto gson en uno de la clase Producto
		
		//buscamos el valor del índice del producto en la url con la función obtenerId:
		int id;
		try {
			
			id = Utilidades.obtenerId(pathInfo);

			responseBody = productoDao.update(producto, id);
			
			//response status code:
			if ( responseBody != null ) {
				statusCode = HttpServletResponse.SC_OK;	//200, ok
			}else {
				statusCode = HttpServletResponse.SC_NOT_FOUND;	//404, no se encuentra el recurso solicitado
			}
			
		} catch (Exception e) {
			// response status code
			responseBody = new ResponseMensaje(e.getMessage());			
			statusCode = HttpServletResponse.SC_BAD_REQUEST;	//400, datos incorrectos para un producto: precio negativo…
			
		} finally  {
			response.setStatus( statusCode );
			
			LOG.debug(" Json convertido a Objeto: " + producto);
			
			//response body para enviar posibles errores:
			PrintWriter out = response.getWriter(); //se encarga de escribir los datos en el body de la response
			String jsonResponseBody = new Gson().toJson(responseBody); //convertir java -> json (usando la librería gson)
			out.print(jsonResponseBody.toString()); //retornamos un array vacío en json dentro del body
			out.flush(); //termina de escribir los datos en el body      
		}	*/
	}